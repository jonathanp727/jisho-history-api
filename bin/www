#!/usr/bin/env node
/* eslint-disable */

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('fcounter:server');
const http = require('http');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

require('../helpers/mongoUtil.js').connectToServer(function(err) {
  if(err) throw err;
  require('../helpers/tokenizerUtil.js').build((err2) => {
    if(err2) throw err2;
    /**
     * Create HTTP server.
     */
    const server = http.createServer(app);

    // Socket io
    exports.io = require('socket.io').listen(server);

    exports.io.on('connection', (client) => {
      console.log('client connected...');

      client.on('userId', (id) => {
        client.join(id);
      });
    });

    /**
     * Listen on provided port, on all network interfaces.
     */

    server.listen(port, process.env.IPV4);
    server.on('error', onError);
    server.on('listening', onListening);

    /**
     * Event listener for HTTP server "listening" event.
     */

    function onListening() {
      const addr = server.address();
      const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
      debug('Listening on ' + bind);
    }
  });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}
